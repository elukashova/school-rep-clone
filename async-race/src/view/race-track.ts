import BaseComponent from './static/base-component';
import { CarType } from './view.types';

export default class RaceTrack extends BaseComponent {
  private selectBtn: BaseComponent | null = null;

  private deleteBtn: BaseComponent | null = null;

  private carNameElemenet: BaseComponent | null = null;

  private leaveBtn: BaseComponent | null = null;

  private stopBtn: BaseComponent | null = null;

  constructor(data: CarType) {
    super('div', undefined, 'race__track');
    this.render(data);
  }

  // eslint-disable-next-line max-lines-per-function
  private render(data: CarType): void {
    const topLinePart: BaseComponent = new BaseComponent('div', this.element, 'race__track-top');
    this.selectBtn = this.createBtn(topLinePart, 'select', 'submit');
    this.deleteBtn = this.createBtn(topLinePart, 'delete', 'submit');
    this.carNameElemenet = new BaseComponent('span', topLinePart.element, 'race__car-name', `${data.name}`);

    const bottomLinePart: BaseComponent = new BaseComponent('div', this.element, 'race__track-bottom');
    const btnsWrapper: BaseComponent = new BaseComponent('div', bottomLinePart.element, 'race__track-bottom__btns');
    this.leaveBtn = this.createBtn(btnsWrapper, 'leave', 'submit');
    this.stopBtn = this.createBtn(btnsWrapper, 'stop', 'submit');

    const trackLine: BaseComponent = new BaseComponent('div', bottomLinePart.element, 'race__track-line');
    const car: Element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    car.classList.add('race__car');
    car.setAttribute('fill', 'none');
    car.setAttribute('width', '673');
    car.setAttribute('height', '356');
    car.setAttribute('viewBox', '0 0 673 356');
    const carPath: Element = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    carPath.setAttribute(
      'd',
      'M184.149 13.3682V37.0402H152.873V88.6549H186.159V198.91L198.909 198.904V88.6537H294.685V198.908H306.045L306.04 88.6537H317.508V71.7576C324.607 71.7576 330.373 66.0025 330.373 58.8931V47.3202C330.373 41.6431 334.972 37.039 340.654 37.039H365.347C371.03 37.039 375.639 41.6483 375.639 47.3202V58.8931C375.639 66.0025 381.394 71.7576 388.498 71.7576V88.6537H401.827V198.908H413.196V88.6537H424.66V71.7576C431.759 71.7576 437.519 66.0025 437.519 58.8931V47.3202C437.519 41.6431 442.129 37.039 447.811 37.039H472.504C478.187 37.039 482.786 41.6483 482.786 47.3202V58.8931C482.786 66.0025 488.541 71.7576 495.65 71.7576V88.6537H508.978V198.908H520.098L520.088 89.1217C520.088 89.1217 520.082 88.7831 520.088 88.6529H529.02L547.134 88.3612C547.134 85.8612 551.968 83.6582 559.291 82.3664L555.364 4.55444C555.364 4.55444 555.134 0.142981 555.134 0.00231467H591.749C591.749 0.00231467 593.525 -0.00289333 593.676 0.00231467L589.515 82.3716C596.838 83.6633 601.671 85.856 601.671 88.3664C601.671 88.4654 601.635 88.5591 601.614 88.6581H620.03C631.514 88.6581 641.811 95.6165 646.254 106.189C655.754 128.793 656.186 155.615 647.426 178.481C644.655 185.7 641.019 192.569 636.608 198.907L647.988 218.251C647.988 218.251 653.889 228.137 653.889 228.288H19.0359C19.0359 228.288 19.0359 198.897 18.9213 198.897V37.0305H-2.00274e-05V13.3585L184.149 13.3682ZM46.5487 155.288V155.361H125.246V88.6531L125.251 86.1687C125.251 71.8247 113.611 60.1847 99.278 60.1847H72.5233C58.174 60.1847 46.5539 71.8254 46.5539 86.1687L46.5487 155.288ZM672.002 253.1V263.538L23.5888 263.397L20.8179 253.095V234.579H661.098L672.002 253.1ZM33.4154 272.084L47.5194 272.173H151.519L151.462 272.084L165.561 272.173H270.149L270.091 272.084L284.18 272.173H435.339L435.241 272.298H435.339L428.345 281.49L416.907 296.73H406.126V296.866C406.298 298.558 406.386 300.277 406.386 302.001C406.386 303.689 406.282 305.355 406.131 307.006H535.85C535.694 305.355 535.595 303.689 535.595 302.001C535.595 300.241 535.668 298.475 535.855 296.751L534.928 296.736H525.043L506.636 272.178H506.803L506.745 272.09L520.849 272.178H672.009L671.905 272.303L672.009 272.309L665.04 281.475L653.572 296.746H642.79C642.796 296.798 642.796 296.834 642.796 296.881C642.968 298.574 643.051 300.293 643.051 302.017C643.051 331.631 618.931 355.741 589.322 355.741C564.4 355.741 543.462 338.662 537.404 315.631L404.55 315.626C398.503 338.662 377.566 355.736 352.632 355.736C327.726 355.736 306.772 338.657 300.726 315.626H285.928C279.887 338.662 258.95 355.736 234.027 355.736C209.12 355.736 188.167 338.657 182.12 315.626H167.902C161.844 338.662 140.902 355.736 115.984 355.736C86.3695 355.736 62.2709 331.626 62.2709 302.012C62.2709 300.251 62.3438 298.486 62.5157 296.762L61.5886 296.746H51.7396L33.3277 272.189H33.4839L33.4154 272.084ZM589.322 332.048C600.968 332.048 610.973 325.314 615.973 315.606H562.675C567.655 325.314 577.659 332.048 589.321 332.048H589.322ZM559.77 306.996H618.874C619.15 305.356 619.379 303.71 619.379 301.991C619.379 300.205 619.223 298.444 618.911 296.725H559.739C559.426 298.444 559.27 300.205 559.27 301.991C559.265 303.705 559.494 305.356 559.77 306.996ZM352.65 332.048C364.296 332.048 374.301 325.314 379.29 315.606H326.009C330.983 325.314 341.003 332.048 352.649 332.048H352.65ZM323.098 306.996H382.202C382.478 305.356 382.702 303.71 382.702 301.991C382.702 300.205 382.546 298.444 382.239 296.725H323.051C322.743 298.444 322.587 300.205 322.587 301.991C322.587 303.705 322.812 305.356 323.098 306.996ZM287.51 296.866C287.666 298.559 287.755 300.277 287.755 302.001C287.755 303.689 287.656 305.356 287.51 307.007H299.172C299.015 305.356 298.911 303.689 298.911 302.001C298.911 300.241 298.984 298.475 299.172 296.751L298.244 296.736H287.494C287.51 296.783 287.51 296.819 287.51 296.866ZM234.037 332.049C245.677 332.049 255.687 325.314 260.677 315.606H207.385C212.374 325.314 222.379 332.049 234.035 332.049H234.037ZM204.474 306.997H263.578C263.859 305.356 264.078 303.71 264.078 301.991C264.078 300.205 263.927 298.444 263.615 296.726H204.432C204.119 298.445 203.968 300.205 203.968 301.991C203.968 303.705 204.198 305.356 204.474 306.997ZM169.463 296.866C169.63 298.559 169.719 300.278 169.719 302.002C169.719 303.689 169.614 305.356 169.463 307.007H180.557C180.401 305.356 180.302 303.689 180.302 302.002C180.302 300.241 180.375 298.476 180.557 296.752L179.646 296.736H169.458C169.458 296.783 169.458 296.819 169.463 296.866ZM115.99 332.049C127.636 332.049 137.641 325.315 142.641 315.606H89.3381C94.3329 325.315 104.349 332.049 115.989 332.049H115.99ZM86.4328 306.997H145.542C145.813 305.356 146.047 303.711 146.047 301.992C146.047 300.205 145.881 298.445 145.568 296.726H86.4014C86.0889 298.445 85.9223 300.205 85.9223 301.992C85.9276 303.705 86.1671 305.356 86.4328 306.997Z',
    );
    carPath.setAttribute('fill', `${data.color}`);
    car.append(carPath);
    trackLine.element.append(car);

    const clock: Element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    clock.classList.add('race__end');
    clock.setAttribute('fill', 'none');
    clock.setAttribute('width', '42');
    clock.setAttribute('height', '76');
    clock.setAttribute('viewBox', '0 0 42 76');
    const clockPath1: Element = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    clockPath1.setAttribute('fill-rule', 'evenodd');
    clockPath1.setAttribute('clip-rule', 'evenodd');
    clockPath1.setAttribute(
      'd',
      'M1.61544 5.4018e-05C1.18706 5.4018e-05 0.775981 0.167113 0.473092 0.464408C0.170202 0.761703 0 1.16519 0 1.58565V4.71825V4.75825V74.4144C0 74.8349 0.170202 75.2384 0.473092 75.5357C0.775981 75.8329 1.18706 76 1.61544 76C2.04417 76.0004 2.45561 75.8337 2.75889 75.536C3.06214 75.2387 3.2327 74.8352 3.2327 74.4144V6.34384H16.1525V11.0234C11.375 13.3654 8.07346 18.2 8.07346 23.7825C8.07346 31.645 14.6063 38.0565 22.617 38.0565C30.6277 38.0565 37.1541 31.6455 37.1541 23.7825C37.1541 18.1997 33.8547 13.3656 29.0784 11.0234L29.0787 6.34384H40.3849C40.8133 6.34384 41.224 6.17678 41.5269 5.87948C41.8298 5.58219 42 5.17906 42 4.75824C42.0004 4.33742 41.8305 3.93393 41.5276 3.63627C41.2244 3.33861 40.8133 3.17121 40.3845 3.17121H3.23139V1.58561C3.23139 1.16479 3.06083 0.761305 2.75758 0.464001C2.45432 0.166343 2.04289 -0.000352801 1.61412 5.60646e-07L1.61544 5.4018e-05ZM19.3852 6.3439H25.8484V9.8835C24.8075 9.65026 23.7289 9.51506 22.6176 9.51506C21.5055 9.51506 20.4267 9.64991 19.3852 9.8835V6.3439ZM22.6176 12.6863C28.882 12.6863 33.9219 17.6338 33.9219 23.7819C33.9219 29.9299 28.8816 34.8847 22.6176 34.8847C16.3536 34.8847 11.3058 29.9311 11.3058 23.7819C11.3058 17.6326 16.3523 12.6863 22.6176 12.6863ZM22.6176 15.8543C22.1888 15.8543 21.7785 16.0217 21.4756 16.319C21.1727 16.6163 21.0025 17.0195 21.0025 17.4403V22.1985H17.7698C17.3414 22.1985 16.9303 22.3656 16.6274 22.6629C16.3245 22.9602 16.1543 23.3637 16.1543 23.7841C16.1543 24.2046 16.3245 24.6081 16.6274 24.9054C16.9303 25.2027 17.3414 25.3697 17.7698 25.3697H22.6179C23.0463 25.3697 23.457 25.2027 23.7599 24.9054C24.0628 24.6081 24.233 24.2046 24.2334 23.7841V17.4403C24.2334 17.0195 24.0632 16.6163 23.7599 16.319C23.457 16.0217 23.0459 15.8543 22.6176 15.8543Z',
    );
    clockPath1.setAttribute('fill', '#62432C');
    const clockPath2: Element = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    clockPath2.setAttribute('fill-rule', 'evenodd');
    clockPath2.setAttribute('clip-rule', 'evenodd');
    clockPath2.setAttribute(
      'd',
      'M22.6176 12.6863C28.882 12.6863 33.9219 17.6338 33.9219 23.7819C33.9219 29.9299 28.8816 34.8847 22.6176 34.8847C16.3536 34.8847 11.3058 29.9311 11.3058 23.7819C11.3058 17.6326 16.3523 12.6863 22.6176 12.6863ZM21.4756 16.319C21.7785 16.0217 22.1888 15.8543 22.6176 15.8543C23.0459 15.8543 23.457 16.0217 23.7599 16.319C24.0632 16.6163 24.2334 17.0195 24.2334 17.4403V23.7841C24.233 24.2046 24.0628 24.6081 23.7599 24.9054C23.457 25.2027 23.0463 25.3697 22.6179 25.3697H17.7698C17.3414 25.3697 16.9303 25.2027 16.6274 24.9054C16.3245 24.6081 16.1543 24.2046 16.1543 23.7841C16.1543 23.3637 16.3245 22.9602 16.6274 22.6629C16.9303 22.3656 17.3414 22.1985 17.7698 22.1985H21.0025V17.4403C21.0025 17.0195 21.1727 16.6163 21.4756 16.319Z',
    );
    clockPath2.setAttribute('fill', 'white');
    clock.append(clockPath1);
    clock.append(clockPath2);
    trackLine.element.append(clock);
  }

  private createBtn(parent: BaseComponent, name: string, type: string): BaseComponent {
    const button = new BaseComponent('button', parent.element, `race__${name}_btn`, `${name}`, {
      type: `${type}`,
    });
    return button;
  }
}
